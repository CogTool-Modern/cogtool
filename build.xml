<?xml version="1.0" encoding="UTF-8"?>

<project name="CogTool" default="package">

        <defaultexcludes echo="true"/>

	<property name="exeversion" value="1.4.0.0" />
	<property name="version" value="1.4" />
	<property name="versionclean" value="1_4" />

	<property name="jlevel" value="1.8" />
    <property name="build.compiler" value="javac${jlevel}" />

	<property name="srcroot" value="${basedir}/java" />
	<property name="macsrcroot" value="${basedir}/mac-support" />
	<property name="libdir" value="${basedir}/lib" />
	<property name="swtdir" value="${libdir}/windows" />
	<property name="macswtdir" value="${libdir}/macintosh" />
	<property name="resdir" value="${basedir}/res" />
	<property name="distdir" value="${basedir}/dist" />
	<property name="builddir" value="${basedir}/build" />
	<property name="java_runtime_res" value="edu/cmu/cs/hcii/cogtool/resources" />
	<property name="clisp" value="${basedir}/lisp" />
	<property name="launch4j.dir" location="${libdir}/build-only/launch4j" />
	<property name="java.library.path" value="${java.library.path};${swtdir}" />

	<!-- Classpath: setup once, used everywhere. -->
	<path id="classpath">
		<fileset dir="${libdir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${libdir}/build-only">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${swtdir}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${builddir}" />
	</path>

	<path id="mac-classpath">
		<fileset dir="${libdir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${libdir}/build-only">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${macswtdir}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${builddir}" />
	</path>

	<!-- Deletes all generated output for a clean rebuild. -->
	<target name="clean" description="Deletes all generated output for a clean rebuild.">
		<delete includeemptydirs="true">
			<fileset dir="${distdir}" includes="**/*" />
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="${builddir}" includes="**/*" />
		</delete>
	</target>

	<!-- Compiles java source with javac. -->
	<target name="compile" description="Compiles java source with javac.">
		<javac srcdir="${srcroot}" destdir="${builddir}" debug="on" fork="true" source="${jlevel}" target="${jlevel}">
			<classpath refid="classpath" />
			<include name="**/*.java" />
		</javac>

		<javac srcdir="${macsrcroot}" destdir="${builddir}" debug="on" fork="true" source="${jlevel}" target="${jlevel}">
			<classpath refid="mac-classpath" />
			<include name="**/*.java" />
		</javac>

		<!-- Copy the resources dir into the build dir -->
		
		<copy todir="${builddir}/${java_runtime_res}" overwrite="true">
			<fileset dir="java/${java_runtime_res}"/>
		</copy>
		
	</target>
	
	<condition property="os.mac">
		<os family="mac" />
	</condition>

	<condition property="os.linux">
		<and>
			<os family="unix" />
			<not>
				<os family="mac" />
			</not>
		</and>
	</condition>

	<!-- Detect Apple Silicon (ARM64) vs Intel Mac -->
	<condition property="os.mac.arm64">
		<and>
			<os family="mac" />
			<or>
				<contains string="${os.arch}" substring="aarch64" />
				<contains string="${os.arch}" substring="arm64" />
			</or>
		</and>
	</condition>

	<condition property="os.mac.intel">
		<and>
			<os family="mac" />
			<not>
				<or>
					<contains string="${os.arch}" substring="aarch64" />
					<contains string="${os.arch}" substring="arm64" />
				</or>
			</not>
		</and>
	</condition>

	<target name="help-copy" description="Create a Help Bundle for Mac from the documentation (docs/)">
		<!-- Build the Jekyll site in a special way that will work inside of Help Viewer app -->
		<exec dir="${basedir}/docs" executable="/bin/sh">
			<arg value="-c" />
			<arg value="bundle exec jekyll build --config _config.yml,_config_helpbundle.yml" />
		</exec>
		<!-- Copy the Mac Help Bundle files -->
		<copy todir="${resdir}/CogTool.tmp/Contents/Resources/CogTool.help/Contents/Resources/en.lproj/" overwrite="true">
			<fileset dir="docs/_site/help"/>
		</copy>
	</target>

	<target if="os.mac" name="help-index" description="Builds the index for Help Bundles and Spotlight">
		<!-- Create a helpindex file for macOS's Spotlight, for searching through Help topics. hituil is macOS only. -->
		<exec dir="${resdir}/CogTool.tmp/Contents/Resources/CogTool.help/Contents/Resources/en.lproj/" executable="/bin/sh">
			<arg value="-c" />
			<arg value="hiutil -I corespotlight -Caf help.cshelpindex . -v -v" />
		</exec>

		<!-- Help Menu Search -->
		<exec dir="${resdir}/CogTool.tmp/Contents/Resources/CogTool.help/Contents/Resources/en.lproj/" executable="/bin/sh">
			<arg value="-c" />
			<arg value="hiutil -I lsm -Caf help.helpindex . -v -v" />
		</exec>

		<!-- Clear the help cache -->
		<exec dir="${resdir}/CogTool.tmp/Contents/Resources/CogTool.help/Contents/Resources/en.lproj/" executable="hiutil">
			<arg value="-P" />
		</exec>
	</target>

	<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />

	<!-- Packages build output and resources into runable packages., -->
	<target name="package" depends="clean,compile, help-copy, help-index" description="Packages build output and resources into runable packages.">

		<tstamp>
			<format property="buildtime" pattern="MM/dd/yyyy-hh:mm" />
		</tstamp>

		<!-- Setup property for manifest classpath entries. -->
		<pathconvert property="manifest.classpath" pathsep=" ">
			<path refid="classpath" />
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="./lib/*" />
				</chainedmapper>
			</mapper>
		</pathconvert>

		<!-- Create a double-clickable app jar with classpath entries. -->
		<jar destfile="${distdir}/CogTool.jar" compress="true" index="false">
			<manifest>
				<attribute name="Class-Path" value="${manifest.classpath}" />
				<attribute name="Main-Class" value="edu.cmu.cs.hcii.cogtool.CogTool" />
			</manifest>
			<fileset dir="${builddir}" />
		</jar>

		<!-- Create a Mac "app" bundle by copying the tmp bundle. -->
		<copy todir="${distdir}/CogTool.app" overwrite="true">
			<fileset dir="${resdir}/CogTool.tmp"/>
		</copy>

		<!-- Copy the local cogtoolstart and swt jars to the Mac bundle. -->
        <copy file="${libdir}/macintosh/cogtoolstart" tofile="${distdir}/CogTool.app/Contents/MacOS/cogtoolstart" />
        <chmod perm="a+x" file="${distdir}/CogTool.app/Contents/MacOS/cogtoolstart" />

        <copy file="${libdir}/macintosh/export-csv-kludge" tofile="${distdir}/CogTool.app/Contents/MacOS/export-csv-kludge" />
        <chmod perm="a+x" file="${distdir}/CogTool.app/Contents/MacOS/export-csv-kludge" />

		<copy todir="${distdir}/CogTool.app/Contents/Resources/Java/dll/">
			<fileset dir="${macswtdir}">
				<include name="*.jnilib" />
			</fileset>
		</copy>
		<copy todir="${distdir}/CogTool.app/Contents/Resources/Java/">
			<fileset dir="${macswtdir}">
				<include name="*.jar" />
			</fileset>
		</copy>

		<!-- Copy the rest of the libdir to the Mac bundle. -->
		<copy todir="${distdir}/CogTool.app/Contents/Resources/Java/">
			<fileset dir="${libdir}">
				<include name="*.jar" />
			</fileset>
		</copy>

		<!-- Setup the Classpath plist value. -->
		<fileset dir="${distdir}/CogTool.app/Contents/Resources/Java" id="distjars">
			<include name="*.jar" />
		</fileset>

		<pathconvert pathsep=":$JAVAROOT/" property="distjarstr" refid="distjars">
			<mapper type="flatten" />
		</pathconvert>

		<echo message="${revision}" />

		<replace file="${distdir}/CogTool.app/Contents/Info.plist" token="DISTJARSTR" value="${distjarstr}" />
		<replace file="${distdir}/CogTool.app/Contents/Info.plist" token="VERSION" value="${version}" />
		<replace file="${distdir}/CogTool.app/Contents/Info.plist" token="REVISION" value="${revision}" />
		<replace file="${distdir}/CogTool.app/Contents/Info.plist" token="BUILDTIME" value="${buildtime}" />
		<replace file="${distdir}/CogTool.app/Contents/Info.plist" token="VERSTRING" value="${version}" />

		<!-- Copy the app jar to the Mac bundle. -->
		<copy file="${distdir}/CogTool.jar" todir="${distdir}/CogTool.app/Contents/Resources/Java/" />

		<!-- Copy the appropriate clisp dist to the Mac bundle based on architecture -->
		<antcall target="copy-mac-lisp-intel" />
		<antcall target="copy-mac-lisp-arm64" />
		<antcall target="copy-mac-lisp-universal" />

		<!-- Copy modern LISP infrastructure -->
		<copy todir="${distdir}/CogTool.app/Contents/Resources/lisp/">
			<fileset dir="${basedir}/lisp">
				<include name="actr6-modern.lisp" />
				<include name="actr6.lisp" />
			</fileset>
		</copy>

		<!-- Copy setup scripts -->
		<copy file="${basedir}/setup-modern-lisp.sh" todir="${distdir}/CogTool.app/Contents/Resources/" />
		<chmod file="${distdir}/CogTool.app/Contents/Resources/setup-modern-lisp.sh" perm="a+x" />

		<!-- Copy the clisp dist to the Mac bundle. -->
		<copy todir="${distdir}/CogTool.app/Contents/Resources/clisp-mac-arm64/">
			<fileset dir="${basedir}/clisp-mac-intel">
				<include name="*" />
			</fileset>
		</copy>

		<!-- Chmod the clisp executable. -->
		<chmod file="${distdir}/CogTool.app/Contents/Resources/clisp-mac-arm64/lisp.run" perm="a+x" />

		<!-- Copy the Mac XUL implementation into the bundle. -->
		<copy todir="${distdir}/CogTool.app/Contents/Resources/XUL-mac/">
		        <fileset dir="${basedir}/XUL-mac"/>
		</copy>

		<!-- Chmod the XUL stuff. -->
		<chmod dir="${distdir}/CogTool.app/Contents/Resources/XUL-mac" includes="XUL,xulrunner*,*.*lib,*.sh" perm="a+x"/>

		<!-- Prepare .tgz for Mac OS X download. -->
		<tar destfile="${distdir}/CogToolMac-${versionclean}-r${revision}.tgz" compression="gzip" longfile="warn">
			<tarfileset dir="${distdir}/" mode="755">
				<include name="CogTool.app/**" />
			</tarfileset>
		</tar>

		<!-- Build a Windows launcher .exe via launch4j. -->
		<condition property="os.windows">
			<os family="windows" />
		</condition>
		<antcall target="package-windows" />
		<antcall target="package-linux" />

	</target>

	<!-- Target for Intel Mac LISP distribution -->
	<target name="copy-mac-lisp-intel" if="os.mac.intel">
		<copy todir="${distdir}/CogTool.app/Contents/Resources/clisp-mac-intel/">
			<fileset dir="${basedir}/clisp-mac-intel">
				<include name="**/*" />
			</fileset>
		</copy>
		<chmod file="${distdir}/CogTool.app/Contents/Resources/clisp-mac-intel/lisp.run" perm="a+x" />
		<!-- Set executable permissions for bundled LISP binaries -->
		<chmod perm="a+x">
			<fileset dir="${distdir}/CogTool.app/Contents/Resources/clisp-mac-intel">
				<include name="**/ecl"/>
				<include name="**/clisp"/>
				<include name="**/sbcl"/>
			</fileset>
		</chmod>
		<echo message="Packaged Intel Mac LISP distribution with portable runtime" />
	</target>

	<!-- Target for Apple Silicon Mac LISP distribution -->
	<target name="copy-mac-lisp-arm64" if="os.mac.arm64">
		<copy todir="${distdir}/CogTool.app/Contents/Resources/clisp-mac-arm64/">
			<fileset dir="${basedir}/clisp-mac-arm64">
				<include name="**/*" />
			</fileset>
		</copy>
		<chmod file="${distdir}/CogTool.app/Contents/Resources/clisp-mac-arm64/lisp.run" perm="a+x" />
		<!-- Set executable permissions for bundled LISP binaries -->
		<chmod perm="a+x">
			<fileset dir="${distdir}/CogTool.app/Contents/Resources/clisp-mac-arm64">
				<include name="**/ecl"/>
				<include name="**/clisp"/>
			</fileset>
		</chmod>
		<echo message="Packaged Apple Silicon Mac LISP distribution with portable runtime" />
	</target>

	<!-- Target for Universal Mac build (includes both architectures) -->
	<target name="copy-mac-lisp-universal" unless="os.mac.intel,os.mac.arm64">
		<condition property="build.universal">
			<os family="mac" />
		</condition>
		<antcall target="copy-mac-lisp-universal-impl" />
	</target>

	<target name="copy-mac-lisp-universal-impl" if="build.universal">
		<!-- Copy Intel Mac LISP -->
		<copy todir="${distdir}/CogTool.app/Contents/Resources/clisp-mac-intel/">
			<fileset dir="${basedir}/clisp-mac-intel">
				<include name="**/*" />
			</fileset>
		</copy>
		<chmod file="${distdir}/CogTool.app/Contents/Resources/clisp-mac-intel/lisp.run" perm="a+x" />
		<!-- Set executable permissions for bundled LISP binaries -->
		<chmod perm="a+x">
			<fileset dir="${distdir}/CogTool.app/Contents/Resources/clisp-mac-intel">
				<include name="**/ecl"/>
				<include name="**/clisp"/>
				<include name="**/sbcl"/>
			</fileset>
		</chmod>

		<!-- Copy Apple Silicon Mac LISP -->
		<copy todir="${distdir}/CogTool.app/Contents/Resources/clisp-mac-arm64/">
			<fileset dir="${basedir}/clisp-mac-arm64">
				<include name="**/*" />
			</fileset>
		</copy>
		<chmod file="${distdir}/CogTool.app/Contents/Resources/clisp-mac-arm64/lisp.run" perm="a+x" />
		<!-- Set executable permissions for bundled LISP binaries -->
		<chmod perm="a+x">
			<fileset dir="${distdir}/CogTool.app/Contents/Resources/clisp-mac-arm64">
				<include name="**/ecl"/>
				<include name="**/clisp"/>
				<include name="**/sbcl"/>
			</fileset>
		</chmod>

		<!-- Copy Linux LISP for cross-platform support -->
		<copy todir="${distdir}/CogTool.app/Contents/Resources/clisp-linux/">
			<fileset dir="${basedir}/clisp-linux">
				<include name="**/*" />
			</fileset>
		</copy>
		<chmod file="${distdir}/CogTool.app/Contents/Resources/clisp-linux/lisp.run" perm="a+x" />
		<!-- Set executable permissions for bundled LISP binaries -->
		<chmod perm="a+x">
			<fileset dir="${distdir}/CogTool.app/Contents/Resources/clisp-linux">
				<include name="**/ecl"/>
				<include name="**/clisp"/>
				<include name="**/sbcl"/>
			</fileset>
		</chmod>

		<echo message="Packaged Universal Mac LISP distribution (Intel + Apple Silicon + Linux)" />
	</target>

	<!-- Target for Linux distribution -->
	<target name="package-linux" if="os.linux">
		<!-- Create Linux distribution directory -->
		<mkdir dir="${distdir}/CogTool-Linux" />

		<!-- Copy main jar -->
		<copy file="${distdir}/CogTool.jar" todir="${distdir}/CogTool-Linux/" />

		<!-- Copy libraries -->
		<copy todir="${distdir}/CogTool-Linux/lib/">
			<fileset dir="${libdir}">
				<include name="*.jar" />
			</fileset>
		</copy>

		<!-- Copy Linux LISP distribution -->
		<copy todir="${distdir}/CogTool-Linux/clisp-linux/">
			<fileset dir="${basedir}/clisp-linux">
				<include name="**/*" />
			</fileset>
		</copy>
		<chmod file="${distdir}/CogTool-Linux/clisp-linux/lisp.run" perm="a+x" />
		<!-- Set executable permissions for bundled LISP binaries -->
		<chmod perm="a+x">
			<fileset dir="${distdir}/CogTool-Linux/clisp-linux">
				<include name="**/ecl"/>
				<include name="**/clisp"/>
			</fileset>
		</chmod>

		<!-- Copy modern LISP infrastructure -->
		<copy todir="${distdir}/CogTool-Linux/lisp/">
			<fileset dir="${basedir}/lisp">
				<include name="actr6-modern.lisp" />
				<include name="actr6.lisp" />
			</fileset>
		</copy>

		<!-- Copy setup scripts -->
		<copy file="${basedir}/setup-modern-lisp.sh" todir="${distdir}/CogTool-Linux/" />
		<copy file="${basedir}/setup-portable-lisp.sh" todir="${distdir}/CogTool-Linux/" />
		<chmod file="${distdir}/CogTool-Linux/setup-modern-lisp.sh" perm="a+x" />
		<chmod file="${distdir}/CogTool-Linux/setup-portable-lisp.sh" perm="a+x" />

		<!-- Create Linux launcher script -->
		<echo file="${distdir}/CogTool-Linux/cogtool.sh">#!/bin/bash
# CogTool Linux Launcher Script
# Automatically sets up modern LISP environment

SCRIPT_DIR="$$(cd "$$(dirname "$${BASH_SOURCE[0]}")" &amp;&amp; pwd)"
cd "$$SCRIPT_DIR"

# Run setup if needed
if [ ! -f ".lisp-setup-complete" ]; then
    echo "Setting up modern LISP environment..."
    ./setup-modern-lisp.sh
    touch .lisp-setup-complete
fi

# Launch CogTool
java -jar CogTool.jar "$$@"
</echo>
		<chmod file="${distdir}/CogTool-Linux/cogtool.sh" perm="a+x" />

		<!-- Create tarball -->
		<tar destfile="${distdir}/CogToolLinux-${versionclean}-r${revision}.tar.gz" compression="gzip" longfile="warn">
			<tarfileset dir="${distdir}/" mode="755">
				<include name="CogTool-Linux/**" />
			</tarfileset>
		</tar>

		<echo message="Packaged Linux distribution" />
	</target>

	<target name="package-windows" if="os.windows">
		<!-- Insert Build Date, etc. -->
		<replace file="${basedir}/res/launch4j.cfg.xml" token="VERSION" value="${version}" />
		<replace file="${basedir}/res/launch4j.cfg.xml" token="REVISION" value="${revision}" />
		<replace file="${basedir}/res/launch4j.cfg.xml" token="BUILDTIME" value="${buildtime}" />
		<replace file="${basedir}/res/launch4j.cfg.xml" token="VERSTRING" value="${version}" />
		<replace file="${basedir}/res/launch4j.cfg.xml" token="EXEVERS" value="${exeversion}" />
		<replace file="${basedir}/res/cogtool.nsi" token="VERSTRING" value="${version}" />
		<replace file="${basedir}/res/cogtool.nsi" token="EXEVERS" value="${exeversion}" />
		<replace file="${basedir}/res/cogtool.nsi" token="SETUPFILE" value="..\dist\CogTool-${versionclean}-setup.exe" />

		<!-- Build a Windows launcher .exe via launch4j. -->
		<launch4j configFile="${basedir}/res/launch4j.cfg.xml" />

		<!-- Build a Windows installer .exe w/ jar & clisp. -->
		<exec executable="C:\Program Files (x86)\NSIS\makensis.exe" vmlauncher="false" resolveexecutable="true">
			<arg value="/XSetCompressor /FINAL /SOLID lzma" />
			<arg file="${basedir}/res/cogtool.nsi" />
		</exec>

		<!-- Remove Build Date, etc. -->
		<replace file="${basedir}/res/launch4j.cfg.xml" token="${version}" value="VERSION" />
		<replace file="${basedir}/res/launch4j.cfg.xml" token="${revision}" value="REVISION" />
		<replace file="${basedir}/res/launch4j.cfg.xml" token="${buildtime}" value="BUILDTIME" />
		<replace file="${basedir}/res/launch4j.cfg.xml" token="${version}" value="VERSTRING" />
		<replace file="${basedir}/res/launch4j.cfg.xml" token="${exeversion}" value="EXEVERS" />
		<replace file="${basedir}/res/cogtool.nsi" token="${version}" value="VERSTRING" />
		<replace file="${basedir}/res/cogtool.nsi" token="${exeversion}" value="EXEVERS" />
		<replace file="${basedir}/res/cogtool.nsi" token="..\dist\CogTool-${versionclean}-r${revision}-setup.exe" value="SETUPFILE" />

	</target>

</project>
